##### Before you begin

# Install dependencies: 

#pysam
#tabulate
#bedtools
#deeptools
#matplotlib
#pandas
#bwa
#pairtools
#samtools
#preseq
#python3
#pip3

# Install other dependencies:

#juicer
#java
#trim galore
#



# On Ubuntu/Linux system clone the git repository:
git clone https://github.com/dovetail-genomics/Micro-C.git
# Run installation script
./Micro-C/installDep.sh

# Once installation is complete close and reopen terminal

# Gather data sets:

## 2 fastq files R1 and R2 (fastq.gz is also acceptable)
## We worked with sample data from Yong: find R1/R2 in microsoft teams
## Clean up of sample data with trim galore
trim_galore --paired ./EC1_S1_L001_R1_001.fastq.gz ./EC1_S1_L001_R2_001.fastq.gz # Run in same directory as files
### take a look at the trimming reports associated with this step

## Reference genome from UCSC: 
wget http://hgdownload.soe.ucsc.edu/goldenPath/hg38/bigZips/analysisSet/hg38.analysisSet.fa.gz #Stored in ./juicer/references

##### Pre-Alignment: 

# Generate an index file for your reference (a reference file with only the main chromosomes should be used)
## Convert downloaded genome to the correct .fasta format
gunzip hg38.analysisSet.fa.gz
mv hg38.analysisSet.fa hg38.fasta
## Generate index file
samtools faidx hg38.fasta

# Use the index file to generate the genome file by printing the first two columns into a new file
cut -f1,2 hg38.fasta.fai > hg38.genome

# Prior to alignment, generate a bwa index file for the chosen reference genome
bwa index hg38.fasta

# Create a temporary directory to avoid running into memory issues in later steps
mkdir /home/user/temp

##### Alignment: From fastq to final valid pairs bam file ### See line 133 for a one line command

# Align your files to reference genome
## Change directory to location of files
cd /home/user/Downloads/microc_summer2022
## Align 
bwa mem -5SP -T0 -t8 ./juicer/references/hg38.fasta ./EC1_S1_L001_R1_001_val_1.fq.gz ./EC1_S1_L001_R2_001_val_2.fq.gz -o aligned.sam
### -5 :
### -S :
### -P :
### -T0 :
### -t8 :
### -o :

# Use parse module of pairtools to organize ligation events into a .pairsam file
##
##
##
pairtools parse --min-mapq 40 --walks-policy 5unique --max-inter-align-gap 30 --chroms-path ./juicer/references/hg38.genome ./aligned.sam > parsed.pairsam
### --min-mapq 40 :
### --walks-policy 5unique :
### --max-inter-align-gap 30 : 
### --chroms-path : specify path to the reference genome
#### The .pairsam file will contains all pairs recorded such that regardless of read1 and read2, the first will have the lower genomic coordinates

# Sort the parsed pairs
pairtools sort --nproc 8 --tmpdir=/home/user/temp/ parsed.pairsam > sorted.pairsam
## --nproc 8 : 
## --tempdir= : 

# Remove PCR duplicates 
## pairtools dedup detects molecules that could be formed via PCR duplication and tags them as “DD” pair type
pairtools dedup --nproc-in 4 --nproc-out 4 --mark-dups --output-stats stats.txt --output dedup.pairsam sorted.pairsam
### --nproc-in 4 : 
### --nproc-out 4 : 
### --mark-dups : 
### --output-stats : 
### --output dedup.pairsam : 
#### Checking stats.txt to see duplicate analysis:
python3 ./Micro-C/get_qc.py -p stats.txt
##Total Read Pairs                              4,584,748  100%
##Unmapped Read Pairs                           214,431    4.68%
##Mapped Read Pairs                             3,314,016  72.28%
##PCR Dup Read Pairs                            141,402    3.08%
##No-Dup Read Pairs                             3,172,614  69.2%
##No-Dup Cis Read Pairs                         2,261,244  71.27%
##No-Dup Trans Read Pairs                       911,370    28.73%
##No-Dup Valid Read Pairs (cis >= 1kb + trans)  2,630,835  82.92%
##No-Dup Cis Read Pairs < 1kb                   541,779    17.08%
##No-Dup Cis Read Pairs >= 1kb                  1,719,465  54.2%
##No-Dup Cis Read Pairs >= 10kb                 1,407,252  44.36%


# Split files to .pairs and .bam (sam)
## use the pairtools split command is used to split the final .pairsam into two files
###.pairsam has two extra columns containing the alignments from which the Micro-C pair was extracted which are not included in .pairs files
pairtools split --nproc-in 4 --nproc-out 4 --output-pairs mapped.pairs --output-sam unsorted.bam dedup.pairsam
#### --nproc-in 4 : 
#### --nproc-out 4 : 
#### --output-pairs :
#### --output-sam : 

# Generating the final .bam file
## bam file should be sorted using samtools prior to downstream steps
samtools sort -@8 -T /home/user/temp/temp.bam -o mapped.PT.bam unsorted.bam
### -@8 : 
### -T : 

# Generating indexed .bai file for downstream steps
##indexing .bam file
samtools index mapped.PT.bam

####### This process can be simplified to avoid the generation of intermediate files using the following command: 
bwa mem -5SP -T0 -t8 ./juicer/references/hg38.fasta ./EC1_S1_L001_R1_001_val_1.fq.gz ./EC1_S1_L001_R2_001_val_2.fq.gz | pairtools parse --min-mapq 40 --walks-policy 5unique --max-inter-align-gap 30 --chroms-path ./juicer/references/hg38.genome | pairtools sort --tmpdir=/home/user/temp/ --nproc 8|pairtools dedup --nproc-in 4 --nproc-out 4 --mark-dups --output-stats stats.txt|pairtools split --nproc-in 8 --nproc-out 8 --output-pairs mapped.pairs --output-sam -|samtools view -bS -@8 | samtools sort -@8 -o mapped.PT.bam;samtools index mapped.PT.bam


##### Generating HiC contact maps using Juicer tools

# Need to know where juicer tools is located : /home/user/Downloads/microc_summer2022/juicer/scripts/juicer_tools.jar
## making HiC contact map
java -Xmx48000m  -Djava.awt.headless=true -jar ./juicer/scripts/juicer_tools.jar pre --threads 8 mapped.pairs contact_map.hic ./juicer/references/hg38.genome
### -Xmx48000m : 
### -Djava.awt.headless=true : 
### -jar : 
### pre
### --threads 8
#### Visualize .hic with Juicebox
#### https://www.aidenlab.org/juicebox/


##### Generating cooler contact maps

# Install cooler and its dependencies
##libhdf5 - sudo apt-get install libhdf5-dev
##h5py - pip3 install h5py
##cooler - pip3 install cooler

# Install pairix
##git clone https://github.com/4dn-dcic/pairix
##cd pairix
##make

# Add the bin path, and utils path to PATH and exit the folder
PATH=/home/user/Downloads/microc_summer2022/pairix/bin/:/home/user/Downloads/microc_summer2022/pairix/util:/home/user/Downloads/microc_summer2022/pairix:$PATH
cd ..

# Make sure mapped.pairs is in the correct format
bgzip mapped.pairs

# Index the mapped.pairs file
pairix mapped.pairs.gz

# Generating single resolution contact map files (.cool)
cooler cload pairix -p 8 ./juicer/references/hg38.genome:1000 mapped.pairs.gz matrix_1kb.cool

# Generating multi resolution contact map files (.mcool) - best practice for visualizing the matrix
cooler zoomify --balance -p 16 matrix_1kb.cool

##### Use HiGlass to visualize the matrix

# Install dependencies
##pip install higlass-manage

# View data set - one step 
higlass-manage view matrix_1kb.mcool

# View data set - step by step
## Start a higlass instance
higlass-manage start
## Add data
higlass-manage ingest matrix_1kb.mcool
## View the data
higlass-manage browse
###link to visualize contact map on higlass
http://localhost:8989/app
